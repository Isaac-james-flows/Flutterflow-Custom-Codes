// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/supabase/supabase.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> blockUser(String blockedByUserID, String blockedUserID) async {
  final supabase = Supabase.instance.client;

  try {
    // First, let's check if this user already has a list of blocked users
    final existing = await supabase
        .from('blocked_users')
        .select('blocked_user_id') // We only need the array of blocked users
        .eq('id', blockedByUserID) // Find the record for our user
        .maybeSingle(); // This handles the case where no record exists yet

    if (existing != null) {
      // If user already has blocked users, let's get their current list
      List<String> currentBlocked =
          List<String>.from(existing['blocked_user_id'] ?? []);

      // Only add the new blocked user if they're not already blocked
      if (!currentBlocked.contains(blockedUserID)) {
        // Add the new user to the list
        currentBlocked.add(blockedUserID);

        // Update the existing record with the new list
        await supabase.from('blocked_users').update({
          'blocked_user_id': currentBlocked, // Send the whole array back
        }).eq('id', blockedByUserID);
      }
    } else {
      // If this is the first time blocking someone, create a new record
      await supabase.from('blocked_users').insert({
        'id': blockedByUserID,
        'blocked_user_id': [
          blockedUserID
        ], // Create a new array with first blocked user
      });
    }
  } catch (e) {
    // Always good to handle errors gracefully
    print('Error in blockUser: $e');
    rethrow; // This allows the calling code to handle the error
  }
}
